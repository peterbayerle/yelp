import numpy as np
import os
import pickle
from .intake import YelpReviewReader, YelpReviewLoader
from .pipeline import create_pipeline
from sklearn.metrics import accuracy_score

class Model(object):
    def __init__(self, data_path):
        self.data_path = data_path
        self.pkl_path = None

    def pickle_data(self, set_size, pkl_path):
        self.pkl_path = pkl_path
        print("Reading and pickling reviews...")
        try:
            reader = YelpReviewReader(self.data_path, max=set_size)
            reader.save_tokens(pkl_path)
        except:
            raise ValueError("Data invalid. Use review data from Yelp Dev API")
        print("Tokens read and saved to {}".format(pkl_path))

    def evaluate(self, classifiers, folds):
        if self.pkl_path == None:
            raise ValueError("Create pickled data set with pickle_data method")
        print("Loading tokens...")
        pkl_file = open(self.pkl_path, "rb")
        reviews = pickle.load(pkl_file)
        print("Tokens loaded")

        models = []
        for classifier in classifiers:
            name = type(classifier()).__name__
            models.append((name + "R", create_pipeline(classifier(), reduction=True)))
            models.append((name + "WR", create_pipeline(classifier(), reduction=False)))

        try:
            loader = YelpReviewLoader(reviews, folds=folds)
        except:
            raise ValueError("Pickled data invalid. Use data generated by pickle_data method")
        print("Fitting models...")
        for item in models:
            name, model = item
            scores = []
            # formatted_scores = []
            for X_train, X_test, y_train, y_test in loader:
                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                score = accuracy_score(y_pred, y_test)
                scores.append(score)
                # formatted_scores.append("{:0.3f}".format(score))
            print("Accuracy of {} is {:0.3f}".format(name, np.mean(scores)))
            # print("Accuracy of {} is {:0.3f}; scores: {}".format(name, np.mean(scores), formatted_scores))

        pkl_file.close()

    def create(self, classifier, model_pkl_path, reduction=False):
        if self.pkl_path == None:
            raise ValueError("Create pickled data set with pickle_data method")
        print("Loading tokens...")
        pkl_file = open(self.pkl_path, "rb")
        reviews = pickle.load(pkl_file)
        print("Tokens loaded")

        model_name = type(classifier).__name__
        model_name += "R" if reduction == True else ""

        model = create_pipeline(classifier(), reduction=reduction)
        try:
            loader = YelpReviewLoader(reviews)
        except:
            raise ValueError("Pickled data invalid. Use data generated by pickle_data method")

        print("Fitting model...")
        model.fit(loader.X, loader.y)
        pickle.dump(model, open(model_pkl_path, "wb"))
        print("Model saved to {}".format(model_pkl_path))

        pkl_file.close()
